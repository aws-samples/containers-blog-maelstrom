AWSTemplateFormatVersion: "2010-09-09"
Description: This template provision an ECS Cluster for ECS-Anywhere custom Service Discovery Demo
Parameters:
  ECSClusterName:
    Type: String
    Default: ECSA-Demo-Cluster
  SSMExpirationDays:
    Type: Number
    Default: 7
  SSMRegistrationLimit:
    Type: Number
    Default: 50

Resources:
  ECSARole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ECSClusterName}-ECSARole"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ssm.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled


  LambdaSSMActivationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ECSClusterName}-LambdaSSMActivationRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Description: Role for Lambda function to manage activations credentials. Created using Cloudformation for ECS-Anywhere on Automating SSM Hybrid Activations.
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:CreateActivation'
                  - 'ssm:DescribeActivations'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                  - 'ssm:DeleteParameter'
                Resource:
                  - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecsa/hybridactivations/*"
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ECSClusterName}-ECSARole"
  LambdaSSMActivation:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ECSClusterName}-Lambda-SSMActivation"
      Description: Lambda Function for ECS-Anywhere on Automating SSM Hybrid Activations.
      Handler: index.handler
      Role: !GetAtt LambdaSSMActivationRole.Arn
      Environment:
        Variables:
          ACTIVATION_EXP_DAYS: !Ref SSMExpirationDays
          ACTIVATION_IAM_ROLE: !Ref ECSARole
          ACTIVATION_REG_LIMIT: !Ref SSMRegistrationLimit
      Code:
        ZipFile: !Sub |
          var cfn_response = require("cfn-response");
          
          exports.handler = async function (event, context) {
              console.log(event);
          
              let responseData = null;
              let responseStatus = cfn_response.FAILED;
          
              try {
                const { SSMClient, CreateActivationCommand, PutParameterCommand, DeleteParameterCommand } = require("@aws-sdk/client-ssm");
                const ssmClient = new SSMClient();
          
                if(event.RequestType=="Delete") {
                  for(let name of ["/ecsa/ssmactivation/ActivationInfo",
                      "/ecsa/ssmactivation/ActivationId",
                      "/ecsa/ssmactivation/ActivationCode"]) {
                  
                    const command = new DeleteParameterCommand({
                      Name: name
                    });
                    console.log(command.input);
                    
                    const response = await ssmClient.send(command);
                    console.log(response);
                  }
                  
                  responseStatus = "SUCCESS";
                  responseData = {
                    "SSMParamerer-ActivationInfo": "/ecsa/ssmactivation/ActivationInfo",
                    "SSMParamerer-ActivationId": "/ecsa/ssmactivation/ActivationId",
                    "SSMParamerer-ActivationCode": "/ecsa/ssmactivation/ActivationCode"
                  };
                }
                else {
                  let iamRole = process.env.ACTIVATION_IAM_ROLE;
                  let regLimit = parseInt(process.env.ACTIVATION_REG_LIMIT);
                  let expDate = new Date();
                  expDate.setDate(expDate.getDate()+parseInt(process.env.ACTIVATION_EXP_DAYS));
              
                  const command1 = new CreateActivationCommand({
                    IamRole: iamRole,
                    RegistrationLimit: regLimit,
                    ExpirationDate: expDate
                  });
                  console.log(command1.input);
                  
                  const response1 = await ssmClient.send(command1);
                  console.log(response1);
                  
                  const command2a = new PutParameterCommand({
                    Name: "/ecsa/ssmactivation/ActivationInfo",
                    Value: JSON.stringify(command1.input),
                    Type: "String",
                    Overwrite: true
                  });
                  console.log(command2a.input);
                  
                  const response2a = await ssmClient.send(command2a);
                  console.log(response2a);
                  
                  const command2b = new PutParameterCommand({
                    Name: "/ecsa/ssmactivation/ActivationId",
                    Value: response1.ActivationId,
                    Type: "String",
                    Overwrite: true
                  });
                  console.log(command2b.input);
                  
                  const response2b = await ssmClient.send(command2b);
                  console.log(response2b);
                  
                  const command2c = new PutParameterCommand({
                    Name: "/ecsa/ssmactivation/ActivationCode",
                    Value: response1.ActivationCode,
                    Type: "SecureString",
                    Overwrite: true
                  });
                  console.log(command2c.input);
                  
                  const response2c = await ssmClient.send(command2c);
                  console.log(response2c);
                  
                  responseStatus = cfn_response.SUCCESS;
                  responseData = {
                      IamRole: iamRole,
                      RegistrationLimit: regLimit,
                      ExpirationDate: expDate,
                      ActivationId: response1.ActivationId,
                      //ActivationCode: response1.ActivationCode,
                      "SSMParamerer-ActivationInfo": command2a.input.Name,
                      "SSMParamerer-ActivationId": command2b.input.Name,
                      "SSMParamerer-ActivationCode": command2c.input.Name
                  };
                }
                
                if(event.ResponseURL) {
                  await new Promise((resolve, reject) => {
                    cfn_response.send(event, context, responseStatus, responseData);
                  });
                }
                return responseData;
              }
              catch(e) {
                if(event.ResponseURL) {
                  await new Promise((resolve, reject) => {
                    cfn_response.send(event, context, responseStatus, responseData);
                  });
                }
                throw e;
              }
          };

       
      Runtime: nodejs18.x
      Timeout: 30
  LambdaSSMActivationInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaSSMActivation.Arn

      
Outputs:
  ECSARole:
    Value: !Ref ECSARole
  SSMParameterSSMActivationInfo:
    Value: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecsa/ssmactivation/ActivationInfo"
  SSMParameterSSMActivationId:
    Value: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecsa/ssmactivation/ActivationId"
  SSMParameterSSMActivationCode:
    Value: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecsa/ssmactivation/ActivationCode"
